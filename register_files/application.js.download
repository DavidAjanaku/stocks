// TEMPORARY PAGE MIGRATION CHECK
function isMigratedPage() {
    return $("section[data-page-migrated]").length > 0;
}

var fontButtonMapping = new Object();
fontButtonMapping.largeFont = "application-large.css?factor=" + (Math.random()).toString().substring(8);

function html5Support() {
    // HTML5 Support Checks
    var dateInputSupported = false;
    try {
        var dateInput = document.createElement("input");
        dateInput.type = "date";

        if (dateInput.type === "date") {
            dateInputSupported = true;
        }
    } catch (e) {}

    var params = new Object();
    params.action = "utility";
    params.cmd = "setHTML5Support";

    if (dateInputSupported) {
        params.dateInputSupported = dateInputSupported;
    }

    $.ajax({
        type : "POST",
        url : getApplicationMainURL(),
        dataType : "json",
        data : params,
        async : false
    });
}

function setFingerprint() {
    try {
        new Fingerprint2({ excludeJsFonts: true }).get(function(r, c) {
            globals.fingerprint = r;
        });
    } catch (e) {
        globals.fingerprint = "";
    }
}

function setTimezone() {
    var params = new Object();
    params.action = "utility";
    params.cmd = "setTimezone";
    params.timezone = (new Date()).getTimezoneOffset() / 60 * (-1);

    $.ajax({
        type : "POST",
        url : getApplicationMainURL(),
        dataType : "json",
        data : params
    });
}

function getApplicationMainURL() {
    var url = $("form#applicationForm").attr("action");
    return url;
}

function initScriptLazyLoad() {
    // Force jQuery to use the Cache Factor for script lazy loading
    $.ajaxSetup({
        beforeSend : function(jqXHR, settings) {
            if (settings.dataType === "script") {
                if (!settings.url.contains("maps.googleapis.com")){
                    settings.url = settings.url.split("?")[0];
                    if (!settings.url.contains("/Universal")) {
                        settings.url += "?" + (Math.random()).toString().substring(8);
                    } else {
                        settings.url += globals.cacheFactor;
                    }
                }
            }
        }
    });
}

function initMainScreen() {
    initScriptLazyLoad();

    window.addEventListener("contentLoaded", function(event) {
        var data = event.detail;
        if (data.loaded) {
            globals.contentQueue.shift();
        } else {
            invalidateSession(data.componentId)
            return;
        }

        if (globals.contentQueue.length === 0) {
            onPageLoaded();
        }
    });

    window.addEventListener("closeApplicationModal", function(event) {
        hideApplicationModal();
    });

    window.addEventListener("reloadApplicationPage", function(event) {
        go();
    });

    window.addEventListener("editAccountInformation", function(event) {
        if (event.detail != null && event.detail.eventData != null && event.detail.eventData.section != null) {
            reviewPreviousAction(event.detail.eventData.section);
        }
    });
    
    window.addEventListener("editInformation", function(event) {
    	// Event to Go to Previous step to Edit information
        goPrev();
    });

    // Perform the following operations at the completion of all AJAX requests
    $(document).ajaxComplete(function(event, xhr, settings) {
        var cacheFactor = xhr.getResponseHeader("cacheFactor");
        if (cacheFactor != null) {
            if (globals.cacheFactor != cacheFactor) {
                globals.cacheFactor = cacheFactor;
            }
        }

        if (serverErrorsPresent(xhr) || globals.expired) {
            hideApplicationModal();

            if (typeof globals.inactivityTimeout != "undefined") {
                clearTimeout(globals.inactivityTimeout);
            }

            $("#applicationForm").html(xhr.responseText);
            globals.expired = true;
        }

        if (globals.accountExists && !globals.expired) {
            if (typeof globals.inactivityTimeout != "undefined") {
                clearTimeout(globals.inactivityTimeout);
            }
            globals.inactivityTimeout = setTimeout(showInactivityLogout, globals.inactivityCheckPoint);
        }

        // Reset Application Form Action to original value
        $("#applicationForm").attr("action", $("#applicationForm").attr("data-action"));
    })

    // Perform the following operations when the application modal closes
    $("#applicationModal").on("hidden.bs.modal", function(e) {
        $("html").removeClass("modal-open");

        $("#applicationModal .modal-header").show();
        $("#applicationModal h5.modal-title").html("");
        $("#applicationModal div.modal-dialog").attr("class", "modal-dialog modal-dialog-centered").addClass("modal-lg");
        $("#applicationModal div.modal-content").attr("class", "modal-content");
        resetApplicationModalContentWrapper();
    });

    // Perform the following operations when the application modal begins to open
    $("#applicationModal").on("show.bs.modal", function(e) {
        $("html").addClass("modal-open");
    });

    // Perform the following operations when the application modal is open
    $("#applicationModal").on("shown.bs.modal", function(e) {
        $("body").removeClass("modal-open");
    });

    // Remove HOVER styles for Touch Enabled Devices
    if ("ontouchstart" in document.documentElement) {
        for (var sheetI = document.styleSheets.length - 1; sheetI >= 0; sheetI--) {
            var sheet = document.styleSheets[sheetI];
            if (sheet.cssRules) {
                for (var ruleI = sheet.cssRules.length - 1; ruleI >= 0; ruleI--) {
                    var rule = sheet.cssRules[ruleI];
                    if (rule.selectorText) {
                        rule.selectorText = rule.selectorText.replace(":hover", ":active");
                    }
                }
            }
        }
    }
}

function applicationResizeSuite() {
    inputIdentificationSwap();
    hideApplicationPopover();
}

function changeDisplayLanguage(clickedLanguage) {
    if (!navigator.cookieEnabled) {
        return;
    }

    if (clickedLanguage.hasClass("active")) {
        return;
    }

    var params = new Object();
    params.action = "utility";
    params.cmd = "setSessionLanguage";
    params.lang = clickedLanguage.attr("data-lang");

    $.ajax({
        type : "POST",
        url : getApplicationMainURL(),
        data : params,
        success : function(data, textStatus, jqXHR) {
            go();
            refreshLanguagePicker(clickedLanguage.attr("data-lang"));
            staticTextLanguageChange(clickedLanguage.attr("data-lang"));
            globals.helpCache = new Object();
        }
    });
}

function logout(params) {
    var url = "/Universal/servlet/AccountAccess.Logout";
    if (globals.isOpenedFromNativeApp) {
        url = "/Universal/servlet/AccountAccess.ImpactLogout";
    }
    if (typeof params != "undefined") {
        url += ("?" + $.param(params));
    }

    showProcessingDialog();
    deleteCookie("appStatusStep", "/");
    setTimeout(function() {
        location.href = url;
    }, 500);
}

function initToolTips(parent) {
    parent.find("[data-toggle='tooltip']").tooltip();
}

function refreshLanguagePicker(newLang) {
    var newLangElement = $("div#languageList a[data-lang='" + newLang + "']");
    $("div#languageList a").removeClass("active");
    newLangElement.addClass("active");
    $("span#currentLanguage").html(newLangElement.html());
}

function staticTextLanguageChange(newLanguage) {
    if (newLanguage != globals.currentLanguage) {
        for (var key in globals.staticTextMap) {
            if (globals.staticTextMap.hasOwnProperty(key)) {
                $(key).html(globals.staticTextMap[key][newLanguage]);
            }
        }
        globals.currentLanguage = newLanguage;
    }
}

var onPageLoading = function() {
    hideApplicationPopover();

    // Hide Buttons
    $("button#back").makeInvisible();
    $("button#continue").makeInvisible();

    // Disable Buttons
    $("button#back").off("click");
    $("button#continue").off("click");

    // Show Wait Message
    showProcessingDialog();
};

var onPageLoaded = function() {
    if (!$("label#title").hasAttr("data-manual-modal-hide")) {
        // Hide Wait Message
        hideApplicationModal();
    }

    // Scroll to Page Top or to Highest Error
    resetScrollPosition();

    // Deal with Labels and Inputs
    if (!isBreakpoint("md") && !isBreakpoint("lg")) {
        inputIdentificationSwap();
    }

    if (globals.viewOnlyMode) {
        // If View Only mode, disable all buttons, links, forms
        $("div#app-contents form").each(function() {
            $(this).attr("action", "");
            $(this).removeAttr("onsubmit");
        });

        $("div#app-contents a").each(function() {
            $(this).off();
            $(this).removeAttr("target");
            $(this).removeAttr("onclick");
            $(this).attr("href", "javascript:void(0);");
        });
        $("div#app-contents img").each(function() {
            $(this).off();
            $(this).removeAttr("onclick");
        });
        $("div#app-contents button").each(function() {
            $(this).off();
            $(this).removeAttr("onclick");
        });
    } else {
        // Re-Enable Main Buttons
        $("button#back").on("click", goPrev);
        $("button#continue").on("click", goNext);
    }

    // Show Main Buttons Unless Blocked
    if (!$("label#title").hasAttr("data-hide-back")) {
        if (isMigratedPage()) {
            $("button#back").parent().addClass("col-lg-2");
        }
        $("button#back").makeVisible();
    }
    if (!$("label#title").hasAttr("data-hide-continue")) {
        if (!$("button#back").isVisible()) {
            $("button#back").parent().hide();
            $("button#continue").parent().removeClass().addClass("col");
            if (isMigratedPage()) {
                $("button#continue").parent().addClass("col-lg-8");
            }
        } else if (isMigratedPage()) {
            $("button#continue").parent().addClass("col-lg-6");
        }
        $("button#continue").makeVisible();
    }
    if (!$("button#back").isVisible() && !$("button#continue").isVisible()) {
        $("section#mainApplicationButtons").hide();
    } else {
        $("section#mainApplicationButtons").show();
    }

    if (typeof afterPageLoaded != "undefined" && typeof afterPageLoaded === "function") {
        afterPageLoaded();
        // Unload 'After Page Loaded' Functionality
        window.afterPageLoaded = function() {
        }
    }

    if (globals.enableLightWeightSave) {
        if (initializeLightWeightData()) {
            setTimeout(function() {
                poplatePersistedLightWeightData();
            }, 1000);
        }
    }

    var event = new CustomEvent("pageLoadComplete", {
        detail : {
            loaded : true,
        }
    });
    window.dispatchEvent(event);
};

function gotoPage(params) {
    // Push parent application content
    globals.contentQueue.push("parent-application");
    onPageLoading();

    // Unload Screenshot Functionality
    if (typeof captureScreenshot != "undefined") {
        window.captureScreenshot = function() {
        }
    }

    // Clear previous page data
    globals.lightWeightDataStr = "";
    globals.enableLightWeightSave = false;
    clearLightWeightData();

    $.ajax({
        type : "POST",
        url : getApplicationMainURL(),
        data : params,
        dataType : "html",
        success : function(data, textStatus, jqXHR) {
            // Make Application Contents Visible on first page landing
            $("div#app-contents").removeClass("invisible");

            if (!globals.expired) {
                // Reset Main Button Styles
                $("button#back").parent().show();
                $("button#back").removeClass().addClass("btn btn-secondary btn-back w-100");
                $("button#back").parent().removeClass().addClass("col-4");
                $("button#continue").removeClass().addClass("btn btn-success btn-continue w-100");
                $("button#continue").parent().removeClass().addClass("col-8");

                // Reset Main Button Text
                $("button#back").html(globals.staticTextMap["#back"][globals.currentLanguage]);
                $("button#continue").html(globals.staticTextMap["#continue"][globals.currentLanguage]);

                // Show Button Container if Hidden
                $("section#mainApplicationButtons").show();

                // Show Funding Bar if it exists and is not visible
                if ($("#confirmMobileBar").length && !$("#confirmMobileBar").is(":visible")) {
                    $("#confirmMobileBar").show();
                }

                // Check for 'accountIdentificationText' Response Header
                var accountIdentificationText = jqXHR.getResponseHeader("accountIdentificationText");
                if (accountIdentificationText != null) {
                    $("[data-account-identifier]").html(decodeURIComponent(accountIdentificationText.replace(/\+/g, " ")));
                    $("[data-account-function]").removeClass("d-none");
                    globals.accountExists = true;
                }

                // Check for 'confirmMobileNumberBar' Response Header
                var confirmMobileNumberBar = jqXHR.getResponseHeader("confirmMobileNumberBar");
                if (confirmMobileNumberBar != null) {
                    $("#confirmMobileNumberBar").remove();
                    if (confirmMobileNumberBar != "remove") {
                        $("section#offerWarning").before(decodeURIComponent(confirmMobileNumberBar.replace(/\+/g, " ")));
                    }
                }

                // Check for 'offerWarning' Response Header
                $("section#offerWarning").hide();
                var offerWarningIndicator = jqXHR.getResponseHeader("offerWarningIndicator");
                if (offerWarningIndicator === "T") {
                    $("section#offerWarningExplain").html(decodeURIComponent(jqXHR.getResponseHeader("inEligibiltyReasons").replace(/\+/g, " ")));
                    $("section#offerWarning").show();
                }

                if ($(".ibkr-app-type").length) {
                    var isIbkrLiteSelected = jqXHR.getResponseHeader("isIbkrLiteSelected");
                    if (isIbkrLiteSelected === "T") {
                        $(".ibkr-lite-styled").removeClass("d-none");
                    } else if (isIbkrLiteSelected === "F") {
                        $(".ibkr-pro-styled").removeClass("d-none");
                    }
                }

                var enableLightWeightSave = jqXHR.getResponseHeader("enableLightWeightSave");
                if (enableLightWeightSave === "T") {
                    globals.lightWeightDataStr = jqXHR.getResponseHeader("lightWeightDataStr");
                    globals.enableLightWeightSave = true;
                }

                // Inject Page Content
                $("#applicationForm").html(data);
            }

            // Update Page Marker
            $("section#app-status").hide();
            if ($("label#title").hasAttr("data-sequence") && $("label#title").hasAttr("data-step")) {
                $("section#app-status").show();

                var sequence = parseInt($("label#title").attr("data-sequence"));
                if (sequence != globals.currentSequence) {
                    globals.currentSequence = sequence;
                }

                var step = parseInt($("label#title").attr("data-step"));
                if (step > 0) {
                    $("section.app-status div.col").each(function() {
                        $(this).removeClass("complete").removeClass("active");
                        var stepIndex = parseInt($(this).attr("data-step-index"));
                        if (step == stepIndex) {
                            $(this).addClass("active");
                        } else if (step > stepIndex) {
                            $(this).addClass("complete");
                        }
                    });
                    globals.currentStep = step;
                }
            }

            globals.currentStepName = "";
            var stepName = jqXHR.getResponseHeader("stepName");
            if (stepName != null) {
                globals.currentStepName = stepName;
            }

            // Activate Help Hot Spots
            initHelpHotSpots();

            // Attach Special Handlers
            attachHandlers($("form#applicationForm"));

            // Initialize any Widgets
            $("#applicationForm").initToggle();
            $("#applicationForm").initIChecks();
            $("#applicationForm").initChosen();

            // Fake Submit Input for Enter/Go Button support
            // If you do not want this behavior this input should not be appended to the Form
            $("#applicationForm").append("<input type=\"submit\" style=\"visibility: hidden; position: absolute; bottom: 0;\"/>");

            // Adjust Scrolling Criteria
            $("div#app-contents").find("input, select, textarea, a, button").on("focus", function() {
                var buffer = 50;
                var element = $(this);
                var elementTopOffset = element.offset().top;
                var windowTopScroll = $(window).scrollTop();
                var windowHeight = $(window).height();
                if (elementTopOffset - windowTopScroll < buffer) {
                    $("html, body").animate({
                        scrollTop : elementTopOffset - buffer
                    }, "fast");
                } else if (elementTopOffset - windowTopScroll > (windowHeight - (buffer * 2))) {
                    $("html, body").animate({
                        scrollTop : elementTopOffset - (windowHeight - (buffer * 2))
                    }, "fast");
                }
            });
        },
        error : function(jqXHR, textStatus, errorThrown) {
        },
        complete : function(jqXHR, textStatus) {
            var event = new CustomEvent("contentLoaded", {
                detail : {
                    loaded : true,
                }
            });
            window.dispatchEvent(event);

            // Identify all Page Sections
            identifyPageSections();

            // Check if Review Step has been triggered and whether the step must be reviewed prior to editing
            if (globals.reviewStep.formNumber != 0) {
                if (jqXHR.getResponseHeader("reviewRequired") == "T") {
                    showEditBlock(globals.reviewStep.formNumber);
                } else {
                    $("button#back").off("click");
                    $("button#back").makeInvisible();
                    $("button#back").parent().hide();

                    $("button#continue").parent().removeClass().addClass("col");
                    if (isMigratedPage()) {
                        $("button#continue").parent().addClass("col-lg-8");
                    }

                    $("button#continue").removeClass().addClass("btn btn-success w-100");
                    $("button#continue").html(globals.staticTextMap["#done"][globals.currentLanguage]);
                    $("button#continue").off("click").one("click", function() {
                        goCurr();
                    });
                }

                globals.reviewStep = { formNumber : 0 };
            } else if (globals.accountExists && globals.currentStep > 0 && !globals.expired) {
                remindCustomerToMoveForward();
            }
        }
    });
}

function serverErrorsPresent(jqXHR) {
    var exp = jqXHR.getResponseHeader("exp");
    if (exp == null) {
        exp = "F";
    }

    var serverErrorsPresent = exp == "T";
    return serverErrorsPresent;
}

function initHelpHotSpots() {
    $("h3[data-help],h4[data-help],p[data-help]").each(function() {
        var header = $(this);
        header.append("<a class=\"btn-icon\" href=\"javascript:void(0);\" tabindex=\"-1\"><i class=\"fas fa-question-circle\"></i></a>");

        var hotSpot= globals.isMobilePlatform ? header : header.find("a");
        var hotSpotEvent = globals.isMobilePlatform ? "click" : "mouseenter";

        hotSpot.data("section", header.attr("data-help"));
        hotSpot.on(hotSpotEvent, function(event) {
            var $hotSpot = $(this);
            var hotSpotSection = $hotSpot.data("section");
            if (!globals.popoverData.shown) {
                $hotSpot.popover({
                    html : true,
                    sanitize : false,
                    trigger : "manual",
                    placement : function() {
                        return isBreakpoint("xs") || isBreakpoint("sm") || isBreakpoint("md") ? "bottom" : "right";
                    },
                    content : globals.popoverData.defaultContent,
                    container : globals.isMobilePlatform ? header.parent() : header,
                    template : "<div class=\"popover\" role=\"tooltip\"><div class=\"arrow\"></div><h3 class=\"popover-header\"></h3><div class=\"popover-body\"></div></div>"
                }).one("shown.bs.popover", function(e) {
                    if (!globals.isMobilePlatform) {
                        $(this).focus();
                        $(".popover").off().on("mouseenter", function() {
                            clearTimeout(globals.popoverData.timeoutId);
                        }).on("mouseleave", function() {
                            globals.popoverData.timeoutId = setTimeout(hideApplicationPopover, globals.popoverData.timeoutDuration);
                        });
                    }
                    $(this).data("bs.popover").config.content = getContextualHelp(hotSpotSection);
                    $(this).popover("show");
                    $(this).data("bs.popover").config.content = globals.popoverData.defaultContent;
                }).popover("show");
                globals.popoverData.shown = true;
                globals.popoverData.identifier = hotSpotSection;
            } else if (globals.popoverData.identifier != hotSpotSection) {
                hideApplicationPopover();
                $hotSpot.trigger(hotSpotEvent);
            } else if (!globals.isMobilePlatform) {
                clearTimeout(globals.popoverData.timeoutId);
            }
        });
        if (!globals.isMobilePlatform) {
            hotSpot.on("mouseleave", function(event) {
                globals.popoverData.timeoutId = setTimeout(hideApplicationPopover, globals.popoverData.timeoutDuration);
            });
        }
        header.removeAttr("data-help");
    });
}

function hideApplicationPopover() {
    clearTimeout(globals.popoverData.timeoutId);
    $(".popover").popover("hide");
    globals.popoverData.shown = false;
    globals.popoverData.timeoutId = -1;
}

function getContextualHelp(section) {
    if (globals.helpCache.hasOwnProperty(section)) {
        return globals.helpCache[section];
    }

    var params = new Object();
    params.action = "utility";
    params.cmd = "contextHelp";
    params.section = section;

    var helpContent = "";
    $.ajax({
        type : "POST",
        url : getApplicationMainURL(),
        data : params,
        async : false,
        success : function(data, textStatus, jqXHR) {
            var temp = $("<div></div>").html(data);
            temp.find("script[data-wizard-script]").remove();

            helpContent = temp.html();
            globals.helpCache[section] = helpContent;
        }
    });
    return helpContent;
}

function attachHandlers(parent) {
    if (typeof parent == "undefined") {
        $("[data-stripnumerics='true']").on("change", function() {$(this).val($(this).val().stripNumerics());});
        $("[data-stripnonnumerics='true']").on("change", function() {$(this).val($(this).val().stripNonNumerics());});
        $("[data-stripnonascii='true']").on("change", function() {$(this).val($(this).val().stripNonASCII());});
        $("[data-touppercase='true']").on("change", function() {$(this).val($(this).val().toUpperCase());});

        $("input, select, textarea").on("focus", function() {blurReadOnly($(this));});

        $("button[type='button']").on("click", onSectionMovement);
        $("input, select, textarea").on("focus", onSectionMovement);

        setTimeout(function() {
            $("input[type='radio']").on("change", onSectionMovement);
            $("input[type='checkbox']").on("change", onSectionMovement);
        }, 1000);
    } else {
        parent.find("[data-stripnumerics='true']").on("change", function() {$(this).val($(this).val().stripNumerics());});
        parent.find("[data-stripnonnumerics='true']").on("change", function() {$(this).val($(this).val().stripNonNumerics());});
        parent.find("[data-stripnonascii='true']").on("change", function() {$(this).val($(this).val().stripNonASCII());});
        parent.find("[data-touppercase='true']").on("change", function() {$(this).val($(this).val().toUpperCase());});

        parent.find("input, select, textarea").on("focus", function() {blurReadOnly($(this));});

        parent.find("button[type='button']").on("click", onSectionMovement);
        parent.find("input, select, textarea").on("focus", onSectionMovement);

        setTimeout(function() {
            parent.find("input[type='radio']").on("change", onSectionMovement);
            parent.find("input[type='checkbox']").on("change", onSectionMovement);
        }, 1000);
    }
}

function onSectionMovement(event) {
    trackSectionMovement($(this));
}

function blurReadOnly(element) {
    if (globals.isMobilePlatform) {
        return;
    }

    if (element.prop("readonly") == true) {
        element.blur();
    }
}

function resetScrollPosition() {
    if (!scrollToErrors()) {
        window.scrollTo(0, 0);
    }
}

function scrollToErrors() {
    var errors = $(".has-error:visible, .alert.alert-danger:visible");
    if (errors.length) {
        window.scrollTo(0, $(errors[0]).offset().top - 200);

        var closestDataFields = $(errors[0]).parent().find("input, select, textarea");
        if (closestDataFields.length) {
            $(closestDataFields[0]).focus();
        }

        return true;
    } else {
        return false;
    }
}

function submitForm(additionalParams) {
    var serializeForm = true;
    if (typeof additionalParams != "undefined") {
        if (typeof additionalParams.serialize == "boolean" && !additionalParams.serialize) {
            serializeForm = false;
        }
        if (!serializeForm && $("input[name='cmd'][type='hidden']").length) {
            additionalParams.cmd = $("input[name='cmd'][type='hidden']").val();
        }
    }

    var formData = serializeForm ? $("#applicationForm").serialize() : "";

    // Do Not Submit Component Form Data
    var componentsData = $(".ibmarketing_components").find("input, select, textarea").serialize();
    formData = formData.replace(componentsData, "");

    if (typeof additionalParams != "undefined") {
        formData += ("&" + $.param(additionalParams));

        if (additionalParams.action == "INIT") {
            var action = $("#applicationForm").attr("action");
            var actionQueryStringIndex = action.indexOf("?");
            if (actionQueryStringIndex >= 0) {
                action = action.substr(0, actionQueryStringIndex);
            }
            action += "?user=" + $("#username").val();
            if (location.search.match(/ft=T/)) {
                action += "&ft=T";
            }

            $("#applicationForm").attr("action", action);
        }
    }

    if (typeof globals.wizardSeed != "undefined" && globals.wizardSeed != 0) {
        formData += ("&wizardSeed=" + globals.wizardSeed);
    }

    if (typeof globals.fingerprint != "undefined" && globals.fingerprint != "") {
        formData += ("&fingerprint=" + globals.fingerprint);
    }

    gotoPage(formData);
}

function go() {
    submitForm({
        action : "GO",
        serialize : false
    });
}

var whenAll = function(promises) {
    var deferred = $.Deferred();
    if (promises.length === 0) {
        deferred.resolve();
        return deferred.promise();
    }

    var length = promises.length;
    var counter = 0;
    var state = "resolved";
    var googleGeocoderFailed = false;
    $.each(promises, function(index, promise) {
        promise.always(function() {
            if (promise.state() === "rejected") {
                state = "rejected";
            }
            if(promise.state() === "rejected" && promise.googleGeocoder){
                googleGeocoderFailed = true;
            }
            counter++;

            if (counter === length) {
                if(state === "rejected"){
                    if(googleGeocoderFailed){
                        deferred["reject"]('suspicious address');
                    }else{
                        deferred["reject"]();
                    }
                }else{
                    deferred["resolve"]();
                }
                deferred[state === "rejected" ? "reject" : "resolve"]();
            }
        });
    });
    return deferred.promise();
};

function goNext() {
    var promises = [];
    var components = document.getElementsByClassName("ibmarketing_components") || [];
    for (var i = 0; i < components.length; i++) {
        var component = components[i];
        var submitFunction = component.id + "Submit";
        if (typeof window[submitFunction] == "function") {
            promises.push(window[submitFunction]());
        }
    }
    
    if (typeof getMissingGoogleResponses != "undefined") {
        var promise = getMissingGoogleResponses();
        if(promise != null){
            promises.push(promise);
        }
    }

    if (promises.length > 0) {
        onPageLoading();
    }

    whenAll(promises).then(function() {
        if (typeof captureScreenshot != "undefined") {
            var callBackFunction = function(pdfStream) {
                $.ajax({
                    type : "POST",
                    url : getApplicationMainURL(),
                    data : "action=screenshot&screenContent=" + pdfStream,
                    cache : false,
                    async : false
                });

                submitForm({
                    action : "NEXT"
                });
            };

            $("div.ibmarketing_components").removeAttr("id");
            if (globals.isImageScreenshotEnabled) {
                window.frames['printer'].convertToImage(callBackFunction);
            } else {
                callBackFunction(captureScreenshot());
            }
        } else {
            submitForm({
                action : "NEXT"
            });
        }
    }, function(errResponse) {
        onPageLoaded();
        if(errResponse === 'suspicious address'){
            //give it some time, because onPageLoaded hides the application modal
            setTimeout(function() {
                showSuspiciousAddressesPopup();
            }, 1000);
            console.log("A suspicious address was found on this page...", errResponse);
        }else{
            // Placeholder to set globals.expired if HTTP status is returned with 500/601/602.
            console.log("A component has errors on this page...", errResponse);
        }
    });
}

function goPrev() {
    submitForm({
        action : "PREV",
        serialize : false
    });
}

function goCurr() {
    submitForm({
        action : "CURR",
        serialize : false
    });
}

function inputIdentificationSwap() {
    var labelsOn = isBreakpoint("md") || isBreakpoint("lg");
    $("label[data-default-option], label[data-default-placeholder]").each(function() {
        var theLabel = $(this);
        var theLabelText = determineLabelText(theLabel);
        var theFor = theLabel.attr("for");

        // Handle a Text Input
        var input = $("input[type='text'][id='" + theFor + "']");
        var newPlaceHolderText = (!labelsOn ? theLabelText : theLabel.attr("data-default-placeholder"));
        input.attr("placeholder", newPlaceHolderText);

        // Handle a Password Input
        var password = $("input[type='password'][id='" + theFor + "']");
        newPlaceHolderText = (!labelsOn ? theLabelText : theLabel.attr("data-default-placeholder"));
        password.attr("placeholder", newPlaceHolderText);

        // Handle a Date Input
        var date = $("input[type='date'][id='" + theFor + "']");
        newPlaceHolderText = (!labelsOn ? theLabelText : theLabel.attr("data-default-placeholder"));
        date.attr("placeholder", newPlaceHolderText);

        // Handle an Email Input
        var email = $("input[type='email'][id='" + theFor + "']");
        newPlaceHolderText = (!labelsOn ? theLabelText : theLabel.attr("data-default-placeholder"));
        email.attr("placeholder", newPlaceHolderText);

        // Handle a Telephone Input
        var telephone = $("input[type='tel'][id='" + theFor + "']");
        newPlaceHolderText = (!labelsOn ? theLabelText : theLabel.attr("data-default-placeholder"));
        telephone.attr("placeholder", newPlaceHolderText);

        // Handle a Text Area
        var telephone = $("textarea[id='" + theFor + "']");
        newPlaceHolderText = (!labelsOn ? theLabelText : theLabel.attr("data-default-placeholder"));
        telephone.attr("placeholder", newPlaceHolderText);

        // Handle a Select Input
        var select = $("select[id='" + theFor + "']");
        var newDefaultOptionText = (!labelsOn ? theLabelText : theLabel.attr("data-default-option"));
        if (select.find("option").length > 1) {
            // Don't update the text if only one option is available
            select.find("option:first-child").text(newDefaultOptionText);
        }
    });
}

function determineLabelText(theLabel) {
    if (theLabel.hasAttr("data-required")) {
        return theLabel.text() + " (" + globals.staticTextMap["#basicRequired"][globals.currentLanguage] + ")";
    } else {
        return theLabel.text();
    }
}

function hideApplicationModal() {
    $("#applicationModal").modal("hide");
}

function resetApplicationModalContentWrapper() {
    $("#applicationModal div#modalContentWrapper").html("");
    $("#applicationModal div#modalContentWrapper").append("<div class='modal-body'></div>");
    $("#applicationModal div#modalContentWrapper").append("<div class='modal-footer d-none'></div>");
}

function showApplicationModal(modalConfiguration) {
    resetApplicationModalContentWrapper();

    $("#applicationModal .modal-body").html("<div class=\"text-center\"><div class=\"spinner-border text-primary\"></div></div>");

    var modalHeaderNeeded = false;
    if (typeof modalConfiguration.title == "string") {
        $("#applicationModal .modal-title").html(modalConfiguration.title);
        modalHeaderNeeded = true;
    }

    if (typeof modalConfiguration.close == "boolean") {
        if (modalConfiguration.close) {
            $("#applicationModalTitleCloseButton").show();
            modalHeaderNeeded = true;
        } else {
            $("#applicationModalTitleCloseButton").hide();
        }
    } else {
        $("#applicationModalTitleCloseButton").show();
        modalHeaderNeeded = true;
    }

    if (!modalHeaderNeeded) {
        $("#applicationModal .modal-header").hide();
    }

    if (typeof modalConfiguration.size == "string") {
        $("#applicationModal div.modal-dialog").attr("class", "modal-dialog modal-dialog-centered").addClass("modal-" + modalConfiguration.size);
    } else {
        $("#applicationModal div.modal-dialog").attr("class", "modal-dialog modal-dialog-centered").addClass("modal-lg");
    }

    if (typeof modalConfiguration.status == "string") {
        $("#applicationModal div.modal-content").attr("class", "modal-content").addClass("modal-" + modalConfiguration.status);
    } else {
        $("#applicationModal div.modal-content").attr("class", "modal-content");
    }

    if (!isApplicationModalOpen()) {
        $("#applicationModal").modal("show");
    }

    if (typeof modalConfiguration.servlet != "undefined" && typeof modalConfiguration.parameters != "undefined") {
        $.ajax({
            type : "POST",
            url : modalConfiguration.servlet,
            data : modalConfiguration.parameters,
            success : function(data, textStatus, jqXHR) {
                setTimeout(function() {
                    updateModalContent(data);
                }, 1000);
            }
        });
    }
}

function isApplicationModalOpen() {
    return $("html").hasClass("modal-open");
}

function updateModalContent(data) {
    if (globals.expired) {
        return;
    }

    $("#applicationModal div#modalContentWrapper").html(data);
    if ($("#applicationModal .modal-footer").text().length > 0) {
        $("#applicationModal .modal-footer").removeClass("d-none");
    }

    var errors = $("#applicationModal div#modalContentWrapper").find(".has-error:visible");
    if (errors.length == 0) {
        errors = $("#applicationModal div#modalContentWrapper").find(".alert.alert-danger:visible");
    }

    if (errors.length) {
        $("#applicationModal").animate({
            scrollTop : $(errors[0]).offset().top
        }, "fast");
    } else {
        $("#applicationModal").animate({
            scrollTop : 0
        }, "fast");
    }

    attachHandlers($("#applicationModal div#modalContentWrapper"));

    $("#applicationModal div#modalContentWrapper").initIChecks();
    $("#applicationModal").initToggle();
    $("#applicationModal").initChosen();


    if (!isBreakpoint("md") && !isBreakpoint("lg")) {
        inputIdentificationSwap();
    }
}

function applicationModalUpdating() {
    updateModalContent("<div class=\"modal-body\"><div class=\"text-center\"><div class=\"spinner-border text-primary\"></div></div></div>");
}

function showInactivityLogout() {
    setTimeout(function() {
        showApplicationModal({"title" : $("#inactiveMsg").text(), "close" : false, "servlet" : getApplicationMainURL(), "parameters" : {"action" : "utility", "cmd" : "inactivityLogout"}});
    }, 500);
}

function showProcessingDialog() {
    showApplicationModal({"close" : false, "print" : false, "size" : "sm"});
}

function identifyPageSections() {
    globals.oldSection = "-1";
    globals.newSection = "-1";

    var index = 0;
    $("h4[data-section-name]").each(function() {
        $(this).parent().attr("data-section", index++);
    });
}

function findPreviousSectionsByInput(input) {
    var inputParent = input.parent();
    if (inputParent.hasAttr("data-section")) {
        return inputParent;
    }
    var section = input.prevAll("div[data-section]");
    if (section.length == 0 && !inputParent.is("form")) {
        section = findPreviousSectionsByInput(inputParent);
    }
    return section;
}

function findSectionByInput(input) {
    var previousSections = findPreviousSectionsByInput(input);
    if (previousSections.length) {
        return $(previousSections[0]);
    } else {
        return null;
    }
}

function trackSectionMovement(input) {
    if ($("#applicationModal div#modalContentWrapper").is(":visible")) {
        return;
    }

    var tempSection = findSectionByInput(input);
    if (tempSection == null) {
        return;
    } else if (tempSection.attr("data-section") == globals.newSection) {
        return;
    } else {
        globals.oldSection = globals.newSection;
        globals.newSection = tempSection.attr("data-section");

        var params = new Object();
        params.action = "utility";
        params.cmd = "trackSectionMovement";

        params.oldSection = globals.oldSection;
        params.newSection = globals.newSection;

        params.oldSectionText = "";
        if ($("[data-section='" + globals.oldSection + "'] > h4").length) {
            params.oldSectionText = $("[data-section='" + globals.oldSection + "'] > h4").attr("data-section-name").trim();
        }
        params.newSectionText = "";
        if ($("[data-section='" + globals.newSection + "'] > h4").length) {
            params.newSectionText = $("[data-section='" + globals.newSection + "'] > h4").attr("data-section-name").trim();
        }

        if (typeof globals.fingerprint != "undefined" && globals.fingerprint != "") {
            params.fingerprint = globals.fingerprint;
        }

        $.ajax({
            type : "POST",
            url : getApplicationMainURL(),
            data : params
        });

        if (globals.enableLightWeightSave) {
            saveLightWeightData();
        }
    }
}

function initPrintFrame() {
    $("iframe#printer").attr("src", getApplicationMainURL() + "?action=utility&cmd=initPrintFrame");
}

function isBreakpoint(size) {
    return $("div[data-device-" + size + "]").is(":visible");
}

function submitPhoneNumberForm() {
    var url = $("form#phoneNumberForm").attr("action");
    var params = $("form#phoneNumberForm").serialize();

    applicationModalUpdating();

    $.ajax({
        type : "POST",
        url : url,
        data : params,
        success : function(data, textStatus, jqXHR) {
            setTimeout(function() {
                updateModalContent(data);
                // Check for 'confirmMobilebar' Response Header
                var confirmMobileNumberBar = jqXHR.getResponseHeader("confirmMobileNumberBar");
                if (confirmMobileNumberBar != null) {
                    if (confirmMobileNumberBar == "remove") {
                        // Remove Confirm Mobile Bar
                        $("#confirmMobileNumberBar").remove();
                    }
                }
            }, 1000);
        }
    });
}

function resendMobileNumberConfirmation(button) {
    if (button.hasClass("btn-disabled")) {
        return;
    }

    var url = $("form#phoneNumberForm").attr("action");
    var params = new Object();
    params.action = $("form#phoneNumberForm").find("input[name='action']").val();
    params.cmd = "resend";
    if ($("form#phoneNumberForm").find("input[name='mandatory']").length) {
        params.mandatory = $("form#phoneNumberForm").find("input[name='mandatory']").val();
    }

    applicationModalUpdating();

    $.ajax({
        type : "POST",
        url : url,
        data : params,
        success : function(data, textStatus, jqXHR) {
            setTimeout(function() {
                updateModalContent(data);
            }, 1000);
        }
    });
}

function remindCustomerToMoveForward() {
    var params = new Object();
    params.action = "previousSteps";
    params.cmd = "remindCustomer";

    var addressConfirmed = false;

    $.ajax({
        type : "POST",
        cache : false,
        url : getApplicationMainURL(),
        dataType : "json",
        data : params,
        success : function(data, textStatus, jqXHR) {
            if (data.remind) {
                showEditReminderBlock(data.additionalReminders);
            }
        }
    });
}

function getHelp() {
    var params = new Object();
    params.action = "cs";
    params.cmd = "getHelp";
    if ($("#countryLegalResidence").length && $("#countryResidentialResidence").length) {
        params.legalCountry = $("input[name='differentColr']").is(":checked") ? $("#countryLegalResidence").val() : $("#countryResidentialResidence").val();
    }
    showApplicationModal({"title" : globals.staticTextMap["#needHelp"][globals.currentLanguage], "servlet" : getApplicationMainURL(), "parameters" : params});
}

function checkHelpAvailability() {
    var params = new Object();
    params.action = "cs";
    params.cmd = "checkHelpAvailability";
    $.ajax({
        type : "POST",
        url : getApplicationMainURL(),
        data : params,
        success : function(data, textStatus, jqXHR) {
            if (!data.optionsExist) {
                $("div.help-icon").remove();
                $("li.nav-help").remove();
            } else if (data.messagesExist) {
                $(".notification").removeClass("hidden");
            }
        }
    });
}

// Fetches form number based on prev section name before calling review previous Step.
function reviewPreviousAction(section) {
    globals.reviewStep.section = section;
    var params = new Object();
    params.action = "previousSteps";
    params.cmd = "fetchPreviousStepForm";
    params.section = section;
    $.ajax({
        type : "POST",
        url : getApplicationMainURL(),
        data : params,
        async : false,
        traditional : true,
        success : function(data, textStatus, jqXHR) {
            if (typeof data.formNumber != "undefined" && data.formNumber > 0) {
                reviewPreviousStep(data.formNumber);
            }
        }
    });
}

function reviewPreviousStep(formNumber) {
    globals.reviewStep.formNumber = formNumber;
    gotoPage({action : "previousSteps", cmd : "reviewPreviousStep", formNumber : formNumber});
}

function reviewPreviousStep(formNumber, entityId) {
    globals.reviewStep.formNumber = formNumber;
    gotoPage({action : "previousSteps", cmd : "reviewPreviousStep", formNumber : formNumber, entityId : entityId});
}

function nativeAppLogin() {
    var nativeAppParam = {
        "action" : "open_login"
    };
    sendNative(nativeAppParam);
}

function sendTelemetryToNative(action, event) {
    var telemetryParam = {
        "action" : "web_app_telemetry",
        "data" : {
            "a" : action,
            "c" : event
        }
    };
    sendNative(telemetryParam);
}

function sendNative(data) {
    if (window.$app && $app.send) {
        $app.send(data);
    } else if (window.sendToNativeApp) {
        window.sendToNativeApp(data);
    } else {
        // Delay is required for android when this function is called from document.ready
        setTimeout(function() {
            if (window.$app && $app.send) {
                $app.send(data);
            } else if (window.sendToNativeApp) {
                window.sendToNativeApp(data);
            }
        }, 2000);
    }
}

var invalidateSession = function(component) {
    var params = new Object();
    params.action = "utility";
    params.cmd = "invalidateSession";
    params.component = component;

    $.ajax({
        type : "POST",
        url : getApplicationMainURL(),
        data : params,
        async : false,
        success : function(data, textStatus, jqXHR) {

        }
    });
};

//# sourceURL=application.js