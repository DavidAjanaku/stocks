var touched = function() {
    $(this).attr("data-touched", "true");
}

var showRules = function() {
    $("[data-login-creds='" + $(this).attr("id") + "']").parent("[data-login-creds-container]").show();
}

var hideRules = function() {
    $("[data-login-creds='" + $(this).attr("id") + "']").parent("[data-login-creds-container]").hide();
}

var encryptLoginInfo = function(formId) {
    if ($("#password").length) {
        encryptFormFields(formId, "password");
    }
    if ($("#password2").length) {
        encryptFormFields(formId, "password2");
    }
};

var maskPassword = function() {
    if ($("input#password").length) {
        var currentType = $("input#password").attr("type");
        if (currentType == "password") {
            $("input#password").attr("type", "text");
            $("span#passwordViewShow").hide();
            $("span#passwordViewHide").show();
        } else {
            $("input#password").attr("type", "password");
            $("span#passwordViewShow").show();
            $("span#passwordViewHide").hide();
        }
    }
}

function submission(submissionParameters) {
    $("button#" + submissionParameters.buttonId).makeInvisible();

    if (!credentialsValidationSuite(submissionParameters.validationChecks)) {
        encryptLoginInfo(submissionParameters.formId);

        $("div#browserWarning").remove();

        if (typeof submissionParameters.dialogSubmit != "undefined" && submissionParameters.dialogSubmit != "" && typeof window[submissionParameters.dialogSubmit] === "function") {
            window[submissionParameters.dialogSubmit]();
        } else {
            submitForm({
                action : submissionParameters.submissionAction
            });
        }
    } else {
        scrollToErrors();

        $("#enc_password").remove();
        $("#enc_password2").remove();

        $("button#" + submissionParameters.buttonId).off("click").one("click", function() {
            setTimeout(function() {
                submission(submissionParameters);
            }, 500);
        });

        $("button#" + submissionParameters.buttonId).makeVisible();
    }
}

function evaluationEngine(e) {
    if (e.keyCode == "37" || e.keyCode == "38" || e.keyCode == "39" || e.keyCode == "40") {
        e.preventDefault();
        return;
    }

    var action = e.data.action;
    if (action == "userName" || action == "alias") {
        setTimeout(function() {
            if ($("#username").hasAttr("data-touched")) {
                if (action == "alias") {
                    evaluateAliasAsCredential(e);
                } else {
                    evaluateUserName(e);
                }
            } else {
                $("#username").val("");
            }
        }, 250);
    } else if (action == "password") {
        setTimeout(function() {
            if ($("#password").hasAttr("data-touched")) {
                evaluatePassword(e);
            } else {
                $("#password").val("");
            }
        }, 250);
    } else if (action == "confirmationPassword") {
        setTimeout(function() {
            evaluateConfirmationPassword(e);
        }, 250);
    }
}

function evaluateUserName(e) {
    var userNameField = $("#username");
    var userName = userNameField.val();
    var passwordField = $("#password");
    var password = passwordField.val();

    var digits = 0;
    var letters = 0;
    var isLeadingLetter = false;
    for (var i = 0; i < userName.length; i++) {
        var c = userName.charAt(i);
        if (c.match(/[0-9]/)) {
            digits++;
        } else if (c.match(/[a-zA-Z]/)) {
            letters++;
            if (i == 0) {
                isLeadingLetter = true;
            }
        }
    }

    ruleEngine($("p#unCheck0"), userName.length != 8 && userName.length != 9);
    ruleEngine($("p#unCheck1"), letters < 3 || digits < 3);
    ruleEngine($("p#unCheck2"), !isLeadingLetter);
    ruleEngine($("p#unCheck3"), userName == "" || /[A-Z]/.test(userName) || /[\W_]/.test(userName));

    if ($("#pwCheck0").length) {
        ruleEngine($("p#pwCheck0"), userName == password);
    }

    if (typeof e != "undefined") {
        userNameField.nextAll().remove();
        if (e.type == "change" && userNameField.hasAttr("data-valid")) {
            checkUserNameAvailability({
                id : "username"
            });
        }
    }
}

function evaluateAliasAsCredential(e) {
    var userNameField = $("#username");
    var userName = userNameField.val(userNameField.val().toLowerCase()).val();
    var passwordField = $("#password");
    var password = passwordField.val();

    var letters = 0;
    for (var i = 0; i < userName.length; i++) {
        var c = userName.charAt(i);
        if (c.match(/[a-zA-Z]/)) {
            letters++;
        }
    }

    ruleEngine($("p#unCheck4"), userName == "" || /[A-Z]/.test(userName) || /[\W_]/.test(userName));
    ruleEngine($("p#unCheck6"), userName.length < 9 || userName.length > 63);
    ruleEngine($("p#unCheck7"), letters < 3);

    if ($("#pwCheck0").length) {
        ruleEngine($("p#pwCheck0"), userName == password);
    }

    if (typeof e != "undefined") {
        userNameField.nextAll().remove();
        if (e.type == "change" && userNameField.hasAttr("data-valid")) {
            checkUserNameAvailability({
                id : "username"
            });
        }
    }
}

function evaluatePassword() {
    var userNameField = $("#username");
    var userName = userNameField.val();
    var passwordField = $("#password");
    var password = passwordField.val();
    var password2Field = $("#password2");
    var password2 = password2Field.val();

    if ($("#pwCheck0").length) {
        ruleEngine($("p#pwCheck0"), password == userName);
    }
    ruleEngine($("p#pwCheck1"), password.length < 8 || password.length > 40);
    ruleEngine($("p#pwCheck2"), password.search(/[a-zA-Z]+/) == -1);
    ruleEngine($("p#pwCheck3"), password.search(/[0-9]+/) == -1);
    errorEngine($("p#pwCheck4"), (password.length == 0 || /^[a-zA-Z0-9~!@#\$%\^&\*()_\+\|\.\{\}\[\]\?,<>=:-]+$/.test(password)));
    ruleEngine($("p#pwCheck5"), password2Field.prop("disabled") || password != password2);

    togglePasswordConfirmation();
}

function evaluateConfirmationPassword() {
    var passwordField = $("#password");
    var password = passwordField.val();
    var password2Field = $("#password2");
    var password2 = password2Field.val();

    ruleEngine($("p#pwCheck5"), password == "" || password2 == "" || password != password2);
}

function ruleEngine(rule, negative) {
    resetRule(rule);
    if (negative) {
        rule.addClass("text-danger");
        rule.find(".fas").removeClass("fa-check-circle").addClass("fa-times-circle");
    } else {
        rule.addClass("text-success");
        rule.find(".fas").removeClass("fa-times-circle").addClass("fa-check-circle");
    }
    validateCredentialsBlock(rule.parent());
}

function resetRule(rule) {
    rule.attr("class", "req m-0 text-sm");
}

function errorEngine(error, valid) {
    resetError(error);
    if (valid) {
        error.removeClass("text-danger");
        error.hide();
    } else {
        error.addClass("text-danger");
        error.show();
    }
    validateCredentialsBlock(error.parent());
}

function resetError(error) {
    error.attr("class", "err m-0 text-sm");
}

function validateCredentialsBlock(credsBlock) {
    var failedRequirements = credsBlock.find("p.req:not(.text-success)");
    var activeErrors = credsBlock.find("p.err.text-danger");
    if (failedRequirements.length || activeErrors.length) {
        $("[data-login-creds='" + credsBlock.attr("data-login-creds") + "']").removeAttr("data-valid");
    } else {
        $("[data-login-creds='" + credsBlock.attr("data-login-creds") + "']").attr("data-valid", "true");
    }
}

function togglePasswordConfirmation() {
    var allPasswordRulesPassed = true;
    $("[data-login-creds='password'] p").each(function() {
        if ($(this).hasClass("req") && !$(this).hasClass("text-success")) {
            allPasswordRulesPassed = false;
        } else if ($(this).hasClass("err") && $(this).hasClass("text-danger")) {
            allPasswordRulesPassed = false;
        }
    });

    if (allPasswordRulesPassed) {
        $("#password2").prop("disabled", false);
    } else {
        $("#password2").val("").prop("disabled", true);
    }
}

function credentialsValidationSuite(validationChecks) {
    var errorsExist = false;

    $.each(validationChecks, function(index, validationCheck) {
        var errors = validationCheck();
        errorsExist = errorsExist || errors;
    });

    return errorsExist;
}

function checkEmailAvailability(options) {
    if (typeof options != "object") {
        return;
    }

    var emailAddressField = $("#" + options.id);
    var emailAddress = emailAddressField.val();

    var params = new Object();
    params.action = "utility";
    params.cmd = "isEmailAddressAvailable";
    params.emailAddress = emailAddress;

    $.ajax({
        type : "POST",
        url : getApplicationMainURL(),
        dataType : "html",
        data : params,
        async : false,
        success : function(data, textStatus, jqXHR) {
            emailAddressField.nextAll().remove();
            emailAddressField.after(data);
        }
    });
}

function checkUserNameAvailability(options) {
    if (typeof options != "object") {
        return;
    }

    var userNameField = $("#" + options.id);
    var userName = userNameField.val();
    var emailAddress = $("#emailAddress").val();

    var params = new Object();
    params.action = "utility";
    params.cmd = "isUserNameAvailable";
    params.userName = userName;
    params.emailAddress = emailAddress;

    if ($("#collectAliasOnly").length) {
    	params.collectAliasOnly = $("#collectAliasOnly").val();
    }

    if (typeof options.finalize != "undefined") {
        params.finalize = options.finalize;
    }

    var async = true;
    if (typeof options.async != "undefined") {
        async = options.async;
    }

    $.ajax({
        type : "POST",
        url : getApplicationMainURL(),
        dataType : "html",
        data : params,
        async : async,
        success : function(data, textStatus, jqXHR) {
            userNameField.nextAll().remove();
            userNameField.after(data);
        }
    });
}

function generateUserNameForImpactNonClient() {
	var emailAddressField = $("#emailAddress");
    var emailAddress = emailAddressField.val();

    var params = new Object();
    params.action = "utility";
    params.cmd = "generateUserNameForImpactNonClient";
    params.emailAddress = emailAddress;
    params.finalize = ($("#password").length > 0);

    if (emailAddressField.attr("data-valid") == 'true') {
        $.ajax({
            type : "POST",
            url : getApplicationMainURL(),
            dataType : "html",
            data : params,
            async : false,
            success : function(data, textStatus, jqXHR) {
                emailAddressField.nextAll().remove();
                emailAddressField.after(data);
            }
        });
    }
}

function generateUserNameForBetting() {
    var emailAddressField = $("#emailAddress");
    var emailAddress = emailAddressField.val();

    var params = new Object();
    params.action = "utility";
    params.cmd = "generateUserNameForBetting";
    params.emailAddress = emailAddress;
    params.finalize = ($("#password").length > 0) && ($("#password2").length > 0);

    if (emailAddressField.attr("data-valid") == 'true') {
        $.ajax({
            type : "POST",
            url : getApplicationMainURL(),
            dataType : "html",
            data : params,
            async : false,
            success : function(data, textStatus, jqXHR) {
                emailAddressField.nextAll().remove();
                emailAddressField.after(data);
            }
        });
    }
}

var validateCredentialRules = function() {
    var error = false;

    // Check all Rules for Username and Password
    $("[data-login-creds] p.req").each(function() {
        var rule = $(this);
        if (!rule.hasClass("text-success")) {
            resetRule(rule);
            rule.addClass("text-danger");
            $("#" + rule.parent().attr("data-login-creds")).closest(".form-group").addClass("has-error");

            error = true;
        }
    });

    // Check all Errors for Username and Password
    $("[data-login-creds] p.err").each(function() {
        var error = $(this);
        if (error.hasClass("text-danger")) {
            resetError(error);
            $("#" + error.parent().attr("data-login-creds")).closest(".form-group").addClass("has-error");

            error = true;
        }
    });

    return error;
}

var validateUsernameAvailability = function() {
    var error = false;

    // Check if Username is available (Synchronously)
    if ($("#username").hasAttr("data-valid")) {
        checkUserNameAvailability({
            id : "username",
            async : false,
            finalize : ($("#password").length > 0) && ($("#password2").length > 0)
        });

        if ($("#usernameNotAvailableError").length) {
            error = true;
        }
    }

    return error;
}

var validateEmailAvailability = function() {
    var error = false;

    // Check if Email Address is available (Synchronously)
    if ($("#emailAddress").hasAttr("data-valid")) {
        checkEmailAvailability({
            id : "emailAddress",
            async : false
        });

        if ($("#emailAddressNotAvailableError").length) {
            error = true;
        }
    }

    return error;
}

function getRSAEncryptedString(rsapub, str) {
    var modulus = new forge.jsbn.BigInteger(rsapub, 16);
    var exponent = new forge.jsbn.BigInteger("3", 16);
    var publicKey = forge.rsa.setPublicKey(modulus, exponent);
    var encrypted = publicKey.encrypt(str);
    return forge.util.bytesToHex(encrypted);
}

function encryptFormFields(formid, fieldid) {
    if (!window.credentialEncryptRsapub || !window.forge) {
        return;
    }
    var $form = $("#" + formid);
    var $field = $("#" + fieldid);
    if ($form.length && $field.length) {
        var encrypted = getRSAEncryptedString(window.credentialEncryptRsapub, $field.val());
        $field.val("");
        if ($("enc_" + fieldid).length) {
            $("enc_" + fieldid).val(encrypted);
        } else {
            $form.append("<input type=\"hidden\" name=\"enc_" + fieldid + "\" id=\"enc_" + fieldid + "\" value=\"" + encrypted + "\">");
        }
    }
}

//# sourceURL=credentials.js