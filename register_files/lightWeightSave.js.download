var lastSubmittedData = "";
var lightWeightDatainitialized = false;
var saveInterval;
var persistInterval;

function initializeLightWeightData() {
    if (!lightWeightDatainitialized) {
        saveInterval = setInterval(saveLightWeightData, 15000);
        persistInterval = setInterval(persistLightWeightData, 5000);
        lightWeightDatainitialized = true;
        lastSubmittedData = "";
        return true;
    }
    return false;
}

function clearLightWeightData() {
    try {
        lightWeightDatainitialized = false;
        clearInterval(saveInterval);
        clearInterval(persistInterval);
    } catch (error) {
        console.log("error stopping interval  " + error.message);
    }
}

function persistLightWeightData() {
    console.log("calling persistLightWeightData1 ...");
    var lightWeightData = {};
    $("input, textarea, select").each(function() {
        try {
            if ($(this).val() == "") {
                return;
            }
            var tagName = $(this).prop("tagName").toLowerCase();
            if (lightWeightData[tagName] == undefined) {
                lightWeightData[tagName] = {};
            }
            if (tagName == "input") {
                var type = $(this).attr("type");
                var name = $(this).attr("name");
                if (name != undefined) {
                    var value = $(this).val();
                    if (type == "checkbox" || type == "radio") {
                        value = $(this).is(":checked");
                    }
                    if (lightWeightData[tagName][type] == undefined) {
                        lightWeightData[tagName][type] = {};
                    }
                    lightWeightData[tagName][type][name] = value;
                }
            } else if (tagName == "select") {
                var name = $(this).attr("name");
                var value = $(this).val();
                lightWeightData[tagName][name] = value;
            } else if (tagName == "textarea") {
                var name = $(this).attr("name");
                var value = $(this).val();
                lightWeightData[tagName][name] = value;
            }
        } catch (error) {
            console.log("error while persisting data  " + error.message);
        }
    });
    globals.lightWeightDataStr = JSON.stringify(lightWeightData);
}

function poplatePersistedLightWeightData() {
    console.log("globals.lightWeightDataStr  " + globals.lightWeightDataStr);
    var lightWeightData = {};
    try {
        lightWeightData = JSON.parse(globals.lightWeightDataStr);
        informCustomerForPersistedData();
    } catch (error) {
        console.log("error parsing data  " + error.message);
    }
    try {
        for ( var tagName in lightWeightData) {
            if (lightWeightData.hasOwnProperty(tagName)) {
                if (tagName == "input") {
                    for ( var type in lightWeightData[tagName]) {
                        for ( var name in lightWeightData[tagName][type]) {
                            try {
                                checkDynamicFields(name);
                                var value = lightWeightData[tagName][type][name];
                                var obj = $("input[type='" + type + "'][name='" + name + "']");
                                console.log("trying to populate ### " + type + " # " + name + " # " + value + " # " + obj.length);
                                if (type == "text" || type == "tel") {
                                    obj.val(value);
                                } else if (type == "checkbox" || type == "radio") {
                                    if (obj.hasAttr("data-input-itoggle")) {
                                        obj.itoggle("state", value);
                                    } else if (value) {
                                        obj.iCheck("check").iCheck("update");
                                    } else {
                                        obj.iCheck("uncheck").iCheck("update");
                                    }
                                }
                            } catch (error) {
                                console.log("error populating input field " + error.message);
                            }
                        }
                    }
                } else if (tagName == "select") {
                    for ( var name in lightWeightData[tagName]) {
                        try {
                            checkDynamicFields(name);
                            $("select[name='" + name + "'] option[value='" + lightWeightData[tagName][name] + "']").prop("selected", true);
                            $("select[name='" + name + "'] option[value='" + lightWeightData[tagName][name] + "']").trigger("chosen:updated");
                            $("select[name='" + name + "']").trigger("change");
                            console.log("trying to populate ### " + name + " # " + lightWeightData[tagName][name]);
                        } catch (error) {
                            console.log("error populating select field " + error.message);
                        }
                    }
                } else if (tagName == "textarea") {
                    for ( var name in lightWeightData[tagName]) {
                        try {
                            $("textarea[name='" + name + "']").val(lightWeightData[tagName][name]);
                            console.log("trying to populate ### " + name + " # " + lightWeightData[tagName][name]);
                        } catch (error) {
                            console.log("error populating textarea field " + error.message);
                        }
                    }
                }
            }
        }
    } catch (error) {
        console.log("error while populating data  " + error.message);
    }
}

function saveLightWeightData() {
    if (lastSubmittedData != globals.lightWeightDataStr) {
        var params = new Object();
        params.action = "previousSteps";
        params.cmd = "saveLightWeightData";
        // some of the text may contain single quote, replacing them to avoid parsing issues
        params.lightWeightData = globals.lightWeightDataStr.replace('\'', '');
        lastSubmittedData = globals.lightWeightDataStr;

        $.ajax({
            type : "POST",
            cache : false,
            url : getApplicationMainURL(),
            data : params,
            success : function(data, textStatus, jqXHR) {
                console.log("Data saved to server");
            }
        });
    }
}

function checkDynamicFields(name) {
    try {
        var indexStr = name.match(/\d+/);
        if (indexStr != null) {
            var index = parseInt(indexStr);
            if (index <= 1) {
                return;
            }
            if (name.startsWith("countryCitizenship")) {
                if ($("select[name='countryCitizenship1']").length > 0) {
                    for (var i = indexStr; i > 1; i--) {
                        if ($("select[name='countryCitizenship" + i + "']").length == 0) {
                            addCitizenship();
                        }
                    }
                }
            } else if (name.startsWith("taxResidency")) {
                if ($("select[name='taxResidency1Country']").length > 0) {
                    for (var i = indexStr; i > 1; i--) {
                        if ($("select[name='taxResidency" + i + "Country']").length == 0) {
                            addTaxResidency();
                        }
                    }
                }
            } else if (name.startsWith("typeCode") || name.startsWith("country") || name.startsWith("number")) {
                if ($("select[name='typeCode1']").length > 0) {
                    for (var i = indexStr; i > 1; i--) {
                        if ($("select[name='typeCode" + i + "']").length == 0) {
                            addPhoneNumber();
                        }
                    }
                }
            }
        }
    } catch (error) {
        console.log("error checking dynamic fields  " + error.message);
    }
}

//# sourceURL=lightWeightSave.js